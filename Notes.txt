*******************************
FastAPI - Framework Intro
*******************************

+ A superfast Python Web Framework
+ It is modern and supports asynchronous programming

Features include:
+ Automatic docs
    --> Swagger UI
        --> Check Routes created
        --> Try them out
    --> ReDoc
+ Modern Python features
    --> Python 3.6 with type using
    --> Pydantic
+ Based on open standards
    --> JSON Schema
    --> Open API
+ Vscode Editor support
    --> Autocomplete feature in vscode, python
+ Security and authentication
    --> HTTP Basic
    --> OAuth2 (also with JWT tokens)
    --> API keys in
        Headers
        Query parameters
        Cookies etc.
+ Dependency Injection
+ Unlimited "plug-ins"
+ Tested
+ Starlette Features
    --> FastAPI uses Starlette, an another framework of python
        which provides
            -> WebSocket support
            -> GraphQL support
            -> In-process background tasks
            -> Startup and shutdown events
            -> Test client built on requests
            -> CORS, GZip, Static Files, Streaming responses
            -> Session and Cookie support
+ Other Supports
    --> SQL databases
    --> NoSQL databases
    --> GraphQL

**********************************
Course Intro
**********************************

+ Getting Started
    --> Install and Setup
    --> Break it down, how it structured

+ Basic Concepts
    --> Path Parameters
    --> API Docs - swagger/redocs
    --> Query parameters
    --> Request body

+ Intermediate Concepts
    --> Debugging FastAPI
    --> Pydantic Schemas
    --> SqlAlchemy database connection
    --> Models and table

+ Database Tasks
    --> Store blog to database
    --> Get blogs from database
    --> Delete
    --> Update

+ Responses
    --> Handling Exceptions
    --> Return response
    --> Define response model

+ User and Password
    --> Create user
    --> Hash user password
    --> Show single user
    --> Define docs tags

+ Relationship
    --> Define User to Blog relationship
    --> Define blog to user relationship

+ Refactor for bigger Application
    --> API Router
    --> API Router with parameters

+ Authentication using JWT
    --> Create Login route
    --> Login and verify password
    --> Return JWT access token
    --> Routes behind authentication

+ Deploy FastAPI
    --> Using Deta.sh website to deploy

******************************
Path Parameters
******************************
fastapi.tiangolo.com/tutorial

+ In FastAPI, to have dynamic parameters in path --> @app.get('/blog/{id}')
    We can define the type for the parameter using typehints --> def show(id: int):
                                                                 def show(id: str):

+ If we have two routes with same initial paths i.e
    eg:
        @app.get('/blog/{id}')
        and
        @app.get('/blog/unpublished')

        we have to be particular about defining the routes in THE PARTICULAR ORDER (ORDER MATTERS) inside the file
        Henceforth,
            it is good to define route @app.get('/blog/unpublished') followed by Dynamic routes @app.get('/blog/{id}')
            else we may encounter parsing error while accessing '/blog/unpublished'

***********************
API Docs
***********************
   + /docs ==> Swagger UI


************************
Query Parameters
************************
+   Other function parameters that are not part of path parameters are interpreted as "query" parameters
+   Significance of typehints for parameters
+   Providing default values to parameters
+   Providing optional parameters using Optional[typehint] ==>sort: Optional[str] = None
+   FastAPI is smart enough to detect parameters from path

