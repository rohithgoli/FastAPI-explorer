*******************************
FastAPI - Framework Intro
*******************************

+ A superfast Python Web Framework
+ It is modern and supports asynchronous programming

Features include:
+ Automatic docs
    --> Swagger UI
        --> Check Routes created
        --> Try them out
    --> ReDoc
+ Modern Python features
    --> Python 3.6 with type using
    --> Pydantic
+ Based on open standards
    --> JSON Schema
    --> Open API
+ Vscode Editor support
    --> Autocomplete feature in vscode, python
+ Security and authentication
    --> HTTP Basic
    --> OAuth2 (also with JWT tokens)
    --> API keys in
        Headers
        Query parameters
        Cookies etc.
+ Dependency Injection
+ Unlimited "plug-ins"
+ Tested
+ Starlette Features
    --> FastAPI uses Starlette, an another framework of python
        which provides
            -> WebSocket support
            -> GraphQL support
            -> In-process background tasks
            -> Startup and shutdown events
            -> Test client built on requests
            -> CORS, GZip, Static Files, Streaming responses
            -> Session and Cookie support
+ Other Supports
    --> SQL databases
    --> NoSQL databases
    --> GraphQL

**********************************
Course Intro
**********************************

+ Getting Started
    --> Install and Setup
    --> Break it down, how it structured

+ Basic Concepts
    --> Path Parameters
    --> API Docs - swagger/redocs
    --> Query parameters
    --> Request body

+ Intermediate Concepts
    --> Debugging FastAPI
    --> Pydantic Schemas
    --> SqlAlchemy database connection
    --> Models and table

+ Database Tasks
    --> Store blog to database
    --> Get blogs from database
    --> Delete
    --> Update

+ Responses
    --> Handling Exceptions
    --> Return response
    --> Define response model

+ User and Password
    --> Create user
    --> Hash user password
    --> Show single user
    --> Define docs tags

+ Relationship
    --> Define User to Blog relationship
    --> Define blog to user relationship

+ Refactor for bigger Application
    --> API Router
    --> API Router with parameters

+ Authentication using JWT
    --> Create Login route
    --> Login and verify password
    --> Return JWT access token
    --> Routes behind authentication

+ Deploy FastAPI
    --> Using Deta.sh website to deploy

******************************
Path Parameters
******************************
fastapi.tiangolo.com/tutorial

+ In FastAPI, to have dynamic parameters in path --> @app.get('/blog/{id}')
    We can define the type for the parameter using typehints --> def show(id: int):
                                                                 def show(id: str):

+ If we have two routes with same initial paths i.e
    eg:
        @app.get('/blog/{id}')
        and
        @app.get('/blog/unpublished')

        we have to be particular about defining the routes in THE PARTICULAR ORDER (ORDER MATTERS) inside the file
        Henceforth,
            it is good to define route @app.get('/blog/unpublished') followed by Dynamic routes @app.get('/blog/{id}')
            else we may encounter parsing error while accessing '/blog/unpublished'

***********************
API Docs
***********************
   + /docs ==> Swagger UI


************************
Query Parameters
************************
+   Other function parameters that are not part of path parameters are interpreted as "query" parameters
+   Significance of typehints for parameters
+   Providing default values to parameters
+   Providing optional parameters using Optional[typehint] ==>sort: Optional[str] = None
+   FastAPI is smart enough to detect parameters from path

*************************
Request Body
************************
+   To declare a request body, use Pydantic models
+   Import Pydantic's BaseModel
        from pydantic import BaseModel
+   Create data model --> we declare our data model as a class that inherits from BaseModel.
    Use standard python types for all the attributes.
        class Item(BaseModel):
            name: str
            description: str | None = None
            price: float
            tax: float | None = None
+   Declare it as a parameter -->
    To add it to our path operation, declare it the same way we declared path and query parameters
        async def create_item(item: Item):
+   The function parameters will be recognized as follows:
    * If the parameter is also declared in the path, it will be used as a path parameter
    * If the parameter is of a singular type (like int, float, str, bool, etc..) it will be interpreted as a query parameter
    * If the parameter is declared to be of the type of a Pydantic model, it will be interpreted as a request body

***************************
Debugging
***************************
+   Application stops at Breakpoint & we get information at that Breakpoint

***************************
Pydantic Schemas
***************************
+   We can observe creation of Project structure
    |--blog
        |--__init__.py
        |--main.py
        |--schemas.py

***************************
Database-Connection
***************************
+   Create a database.py file & setup the requirements for database connection
+   SQLAlchemy 2.0 Docs --> https://docs.sqlalchemy.org/en/20/tutorial/index.html#unified-tutorial

***************************
Create Model and Tables
Store blog to database
Get blog from database
***************************

***************************
Exception & Status Code
***************************
+   status_code is a parameter of the decorator method(get, post, put, etc.)
+   We can use the convenience variables from fastapi.status
+   Using Response parameter in path operation function to return custom status code in response
+   Instead of the above where we are using Response parameter, we can use HTTPException of fastapi
        from fastapi import HTTPException

        raise HTTPException(status_code=404, detail="User not found")

**************************
Delete a Blog
Update a Blog
CRUD using fastapi
**************************

**************************
Response Model
**************************

**************************
Create User
**************************

**************************
Hash Password
Show User
**************************

**************************
Using Doc Tags
**************************
+   All the endpoints are under default
+   We can show the endpoints under different tags

**************************
Relationship
**************************
+   Every Blog must belong to a User, How to create relationship ?
+   We can create relationships from Blog to User & User to Blog

